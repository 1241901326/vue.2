2020/10/21
mvc 
mvvm
1.定义在data中变量和定义在 methods中 的属性和方法我们都可以通过vue实例进行访问
 let vm = new Vue({
     data:{
         a:1,
         b:2
     },
     methods:{
         sayHello()
     }
 })
 vm.a
 vm.sayHello()
 2.在vue中，在methods中的方法\生命周期钩子函数中的this指向当前vue实例
 3.生命周期钩子函数

    beforeCreate  vue实例创建之前，vue实例存在，但是data中的属性和methods中的方法
                 还没有绑定到该实例中
    created()  Vue实例已创建完毕，但是数据还没有渲染到页面中，经常在这个
    阶段进行数据的初始化（ajax）

    beforeMount 当model中的数据绑定到view之前

    mount     model中的数据绑定到view上
    
    beforeupdate  model数据变化引起view改变之前
    update        model 数据变化引起view改变之后
4.模板语法
    vue可以声明式将vue中的数据绑定在html中
    模板:(自己写的不是真的，而是模板，就是虚拟DOM)
    <p>{{msg}}</p>
    原理：（vue帮助进行dom操作）
    var msg = vm.data.msg
    var $p = $('<p>+msg+</p>')
    $p.appenTo($('body'))
渲染函数：render
    1）文本插值：
        <span>message:{{masg}}</span>
        <span v-once>message:{{masg}}</span>值不会再变
    2)js表达式
        可以在大括号中直接插入js表达式
        {{age>16?:'成年人':'未成年人'}}
    3）原始的html
      <p>{{msg}}</p>              //<strong>hello</strong>
        <p v-html='msg'></p>        // hello
    4)属性绑定指令
    属性绑定不能使用双大括号的方法，这个时候可以使用
    v-bind:属性名 = '变量'
    <p v-bind:class='myclass'>{{msg}}</p>
    5)显示与隐藏指令
        
     <p v-html='msg'  v-show='isShow'></p>
       isshow为flase 元素不会渲染到页面中
    6)事件绑定指令
        <div v-on:click="">btn</div>   
    7)指令缩写
     ： @
    8)列表渲染
    使用 key  管理可复用的元素，为了提升效率，节约成本，vue可能会
    复用元素，如果我们不希望它复用，可以给他添加key
    <template v-if="loginType === 'username'">
    <label>Username</label>
    <input placeholder="Enter your username" key="username-input">
    </template>
    <template v-else>
    <label>Email</label>
    <input placeholder="Enter your email address" key="email-input">
    </template>
    如上 代码。当切换登录方式的时候，input不会重新创建，而是复用，这个时候
    引发很多问题，不如value会残留，可以为input添加一个key属性，表示input式
    独立的，不能复用的

    v-for="(item,index) in students"
    1)遍历数组
        <li v-for="item in students" :key="item.id">
                <span>{{item.id}}</span>
                <span>{{item.name}}</span>
                <span>{{item.age}}</span>
            </li>
    2)遍历对象
    3）
        考虑：
         number
         如果num发生变化，vue会自动将变化的值渲染页面中

         array
         如果在数组中添加了一个元素，是否会触发vue的视图更新？
         按理说不好，但是vue将被监听的数组的变异方法进行了包裹，
         所以他们也将触发视图更新
            push() pop() shift() unshift() splice() sort() reverse()       
5.表单输入绑定
    可以使用v-model 指令再表单input textarea select元素
    上创建双向数据绑定
                初始化


6.事件处理
    0）基础处理
        1.事件三要素
            事件对象（event对象）

            事件处理函数（匿名函数）
            事件源（dom对象）
        2.事件流
            事件捕获
            事件冒泡
        3.事件代理
            将事件绑定在当前元素的父元素上，而不是当前元素上，当期元素的
            同级元素就可以动态获取与删除
            event.target 用户点击的元素
             1)dom  
                var dom = document.getElementBbyId('ONE')
                dom.onclick = function(event){}
                dom 事件源
                匿名函数为事件处理对象
                event为事件对象
            2）jquery
                var $dom = $('#ONE')
                $dom.on('click',function(event){})
                $dom事件源
                 匿名函数为事件处理对象
                event为事件对象
            3）vue
                <div id="app">
                    <button @click='addHanler'>添加</button>
                </div>
                new Vue({
                    el:'#app',
                    methods:{
                        addHanler:function(event){

                        }
                    }
                })
                声明式事件绑定
                button事件源
                addHanler为事件处理函数
                event为事件对象

                1.事件绑定
                    <div @click="addHanler($event,1,2)">添加</div>

                methods:{
                    addHanler:function(event){

                    }
                }
                2.事件修饰符
                   v-on:click.stop =>  event.stopPropagation()
                    v-on:submit.prevent = >event.preventDefault()
                    .once => 绑定一次
                3.  按键修饰符
                    v-on:keyup.enter
                    v-on:keyup.13
                    .enter  .tab
                4.辅助修饰符
                 ctrl
7.计算属性和监听器
    1）监听器：watch 监听数据的变化的
     1.简洁
        watch:{
            "param.keywords":function(new_v,old_v){

            }
        }
     2.详细(可以检测对象的变化)
        watch:{
            handler:function(new_v,old_v){},
            deep:true
        }
    2）计算属性
        初衷，用于简单运算，在模板中放入太多的逻辑会让模板过重
        且难以维护
        解决{{message.split('').reverse().join('')}}
        
        方法：
        computed:{
        reversedMessage:function(){
            return this.msg.split('').reverse().join('')
            //必须有返回值
        },
        upperMsg:function(){
            return this.msg.toUpperCase()
        }}
        0.作用
            想要将data中 的值经过处理之后再显示而非直接显示

        1.计算属性【缓存】 vs 方法
            <p>  {{reversedMessage}}</p>
            <p>  {{reversedMessage}}</p>
            <p>  {{reversedMessage}}</p>
            <p> {{toreversedMessage()}}</p>
            <p> {{toreversedMessage()}}</p>
            <p> {{toreversedMessage()}}</p>
        computed 有缓存 计算一次 
8.class与style绑定
        1） style
                    <div style="color:#fff;background:teal;">hello</div>
        <div :style="str">hello</div>
        <div :style="[obj1,obj2]">hello</div>
        2)class的绑定
        比 style多
        错误  <div :sytle='{one:true,two:false}'>{{msg}}</div>
        正确  <div :class='{one:false,two:false}'>{{msg}}</div>
9.组件
    components
    获取父组件给子组件传值<slot></slot>
    1.组件注册
      1）全局注册
        new Vue（）
        Vue.component()
      2)局部注册
    2.组件名
        1）my-component-name  myComponentname
    3.prop
    父组件 -----》子组件
    使用
    <my-component :data='students'></my-component>

    定义
     'my-component':{
                template:`
                        <ul>
                    <li v-for='i in data'>
                        {{i.name}}{{i.age}}
                    </li>
                </ul>`,
                props:['data'],
                或者 props:{
                    data:array
                }
                data(){
                    return{
                        
                    }
                },
    4.父组件向自组缉拿传递指定类型的值
      :a = "12"
    5.自定义事件
        子组件--》父组件
         <div :v-if='isshow' @close='handler' :style="one">
        <my-alert>你好</my-alert>
    </div>

    'my-alert':{
              template:`
               <div class='alert' @click="handle">
                  <slot></slot>
                </div>
              `,
              data(){
                  return{
                    
                  }
              },
              methods:{
                handle(){
                    this.$emit('close')
                }
                
    6.插槽
    父组件----》子组件
        dom片段

     父组件在调用子组件的时候，父组件在子组件的标签中添加的
     内容想要传递给子组件，子组件需要通过<slot>来接受
     <my-component>
        <div class='title'>hello</div>
     </my-component>

     Vue.component('my-component',{
         template:`
         <div class='alert'>
           <slot></slot>
         </div>
         `
     })
10.脚手架
     2）利用脚手架创建
     vue create apo01
     3) 结构
       src
        assets  静态资源
        components  组件（表格，导航，模态框）
        views        组件（子页面组件）
        main.js  程序的入口，根组件定义的地方
        app.vue  第一个组件
      public  公共资源
            index。html  提供真实的根dOm
      node_modules  依赖
      package.json  项目配置文件
      babel.config.js  babel 配置
      vue.config.js  webpack 配置
11.组件库
    element-ui
    vant

14.vuex
    状态管理机制
    父组件 -变量-> 子组件 props
    父组件 -模板-> 子组件  slot
    子组件 -事件->  父组件  自定义事件

    状态 = 共享变量 = ajax获取的后台数据、state

    1）要素
        state   用于存放状态
            store.state.a
        getters  用于获取状态，控制  直接获取
            a(){
                return a.filter() //处理一下再获取
            }
        mutation  突变 ,同步修改state值的方式
            increment(state){
                
            }
            stroe.commit('increment')
        Action  动作，支持异步操作，提交突变

15.jquery 与axios
    1)机制
        axios 基于 promise
        axios.get(uel).then(()=>{}).catch(()=>{})
        jquery 基于回调函数
        $.ajax({
            url,
            success:()=>{

            },
            error:()=>{}
        })
        $.get(url,()=>{})
    2)data 参数，请求头 post提交
    axios 
        默认Content-Type:application/json

        OPTIONS 
            探路协议，
        POST
    jquery
        默认Content-Type:application/x-www-form-urlencoded
        POST


16.路由机制 vue-router
  html中
    <router-link to ='/user'></router-link>   按钮，点击后可以引起router-view的变化
    <router-view></router-view>   容器，承载变化的内容

    浏览器地址栏发生变化
    1）实现机制
        1.定义子组件
            var User = {
                template:``,
                data(){
                    return {

                    }
                }
            }

        
        2.在路由中注册
            const  routes = [
                {path:'/user' ,component: User}
                {path:'/product' ,component: product}
            ]
            const  touer = new  VueRouter({
                routes
            })
        3. 将路由的实例注册在vue中
                new Vue({
                    router ,
                    store
                })
        4. back 回退
    2）编程式路由
      this.$router.push(path)
    3）传参
        let routes = [{
            path:'/user/:id',
            component:'User'
            props:true
        }]
            this.$router.push('/user/1001')

            let User = {
                //期望从父组件接受的变量
                props:['id']
                created(){
                    this.$route.params.id
                }
            }
    4)导航守卫
        登录拦截处使用
        router.beforeEach((to,from,next)=>{
            console.log(to);
            console.log(from);
            console.log(next)
            //调用该函数才能放行
            next（）
        })
    5）脚手架中应用
        跳转到详情
        this.$route.push('/xiangqing')
         this.$router.push({ name: 'order' })
        详情上方
    
17.总结
    nextTick()，是将回调函数延迟在下一次dom更新数据后调用，简单的理解是：当数据更新了，在dom中渲染后，自动执行该函数，

    $refs 是所有注册过的ref的一个集合，
    
    

    
